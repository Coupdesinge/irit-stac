#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Author: Eric Kow
# License: BSD3

"""
Crude EDU segmenter

Reads CSV files; for now justs output '&' delimited segments in lines

Quick start
-----------

"""

from   itertools import chain
import copy
import csv
import re
import sys

from nltk.tokenize import sent_tokenize

import segmentation
import stac_csv

def segment_row(t):
    return join_segments(segmentation.segment(t))

def normalise_row(t):
    """
    Don't do any segmentation, but reformat already-segmented text
    (for easier comparison with automatically segmented output)
    """
    return join_segments(split_segments(t))

def replace_text(job, row):
    row2     = copy.copy(row)
    row2[-3] = job(row[-3])
    return row2

def get_text(row):
    return row[-3]

def join_segments(xs):
    return "& ".join(xs)

def split_segments(t):
    return [ x.strip() for x in t.split('&') ]

import argparse

arg_parser = argparse.ArgumentParser(description='Segment into EDUs.')
arg_parser.add_argument('input_file' , metavar='FILE')
arg_parser.add_argument('output_file', metavar='FILE')
arg_parser.add_argument('--csv',
                        action='store_const',
                        const=True,
                        default=False,
                        dest='csv',
                        help='output csv file (replacing text with segmentations)')
arg_parser.add_argument('--no-seg',
                        action='store_const',
                        const=False,
                        default=True,
                        dest='segment',
                        help='do not do segmentation')
args=arg_parser.parse_args()

filename_in  = args.input_file
if args.segment:
    job=segment_row
else:
    job=normalise_row

with open(filename_in, 'rb') as infile:
    reader = csv.reader(infile,  delimiter='\t')
    rows   = list(reader)

with open(args.output_file, 'wb') as outfile:
    if args.csv:
        writer = csv.writer(outfile, dialect='stac')
        for row in rows:
            writer.writerow(replace_text(job,row))
    else:
        segmented = [job(get_text(r)) for r in rows]
        print >> outfile, "\n".join(segmented)
