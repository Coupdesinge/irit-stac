#!/usr/bin/env python

# Author: Eric Kow
# License: CeCILL-B (French BSD3-like)

"""
Combine atttelo parse results with parts of the corpus into a
single XML document
"""

from __future__ import print_function
from collections import namedtuple, defaultdict
import argparse
import csv
import sys

from educe.stac.annotation import addressees, is_edu
from educe.stac.context import Context
from educe.stac.util.args import read_corpus
from educe.stac.util import prettifyxml

from stac import settlers_xml as stx
from stac import attelo_out as pout

# pylint: disable=too-few-public-methods


class Background(namedtuple('Background',
                            'contexts resources')):
    '''
    contextual information needed to translate an edu;
    resources can be set to `{}`
    '''
    pass


class LightTurn(namedtuple('LightTurn', 'anno edus')):
    """
    light wrapper around turn annotation object
    and edus contained within it
    """
    @classmethod
    def sorted_first(cls, turns):
        """
        returns turns sorted by their starting span
        (ambiguous if multiple turns have same starting span)
        """
        return sorted(turns,
                      key=lambda t: t.anno.text_span().char_start)

    def to_stx(self):
        "to Settlers XML object"

        turn_id = self.anno.local_id()
        stx_edus = [x.to_stx() for x in self.edus]
        return stx.ChatMessage(identifier=turn_id,
                               edus=stx_edus)


class LightEdu(namedtuple('LightEdu',
                          'anno doc context parents resources')):
    """
    light wrapper around edu annotation object
    and links to parent annotations
    """
    def to_stx(self):
        "to Settlers XML object"

        span = self.anno.text_span()

        feats = self.anno.features

        s_act = stx.SurfaceAct.from_string(feats.get('Surface_act'))

        da_type = stx.DialogueActType.from_string(self.anno.type)
        d_act = stx.DialogueAct(da_type, self.resources)

        ds_pairs = [stx.DsPair(p.local_id(),
                               stx.RelationLabel.from_string(l))
                    for p, l in self.parents]

        return stx.Edu(identifier=self.anno.local_id(),
                       span=span,
                       text=self.doc.text(span),
                       speaker=self.context.speaker(),
                       addressees=addressees(self.anno),
                       surface_act=s_act,
                       dialogue_act=d_act,
                       ds_pairs=ds_pairs)

# ---------------------------------------------------------------------
#
# ---------------------------------------------------------------------


def _extract(doc, background, predictions):
    """
    Extract and regroup the important information from
    attelo and resource extractor CONLL rows ::

        (Background, [String], [String) -> [LightTurn]

    Note also that each row corresponds to an EDU, so
    there sholud be fewer-to-equal results as they will
    be reorganised into rows
    """
    edus = {x.identifier(): x for x in doc.units if is_edu(x)}
    parents = defaultdict(list)
    for id_parent, id_child, label in predictions:
        if label == 'UNRELATED' or id_parent == 'ROOT':
            continue
        parents[id_child].append((edus[id_parent], label))

    #l_edus = [_extract_edu(background, x) for x in rows]
    tdict = defaultdict(list)
    for eid, anno in sorted(edus.items(),
                            key=lambda (k, v): v.text_span()):
        l_edu = LightEdu(anno,
                         doc,
                         background.contexts[anno],
                         parents[eid],
                         background.resources.get(eid))
        turn = background.contexts[l_edu.anno].turn
        tdict[turn].append(l_edu)
    l_turns = [LightTurn(k, v) for k, v in tdict.items()]
    return LightTurn.sorted_first(l_turns)


def _extract_resources(resources):
    """
    Extract abstract resource annotation from the CONLL
    style output in our resource predictor. Return a
    dictionary from global edu ids to resources::

        [String] -> Dict String [Resource]

    Note that each row corresponds to a resource NP and
    may contain more than one resource
    """
    findings = defaultdict(list)
    for row in resources:
        edu_id = row[4]
        rstatus = stx.ResourceStatus[row[10]] if len(row) > 10\
            else stx.ResourceStatus.unknown_status
        for rtype in row[5:10]:
            if rtype != '-':
                resource = stx.Resource(rtype=stx.ResourceType[rtype],
                                        status=rstatus)
                findings[edu_id].append(resource)
    return findings


def _to_xml(l_turns):
    """
    Convert to XML tree ::

        [LightTurn] -> ET.ElementTree
    """
    frag = stx.GameFragment(x.to_stx() for x in l_turns)
    return frag.to_xml()


def read_tsv(instream):
    """
    Iterator for a STAC/educe conll file
    """
    return csv.reader(instream, dialect=csv.excel_tab)

# ----------------------------------------------------------------------
# options
# ----------------------------------------------------------------------


def mk_argparser():
    """
    Subcommand flags.
    """
    psr = argparse.ArgumentParser(description='convert parsing pipeline '
                                  'output to XML')
    psr.add_argument('corpus', metavar='DIR',
                     help='Corpus dir (eg. data/pilot)')
    psr.add_argument('input', nargs='?', type=argparse.FileType('rb'),
                     default=sys.stdin)
    psr.add_argument('--resources',
                     type=argparse.FileType('rb'))
    psr.add_argument('--output', nargs='?', type=argparse.FileType('wb'),
                     default=sys.stdout)
    return psr

# ---------------------------------------------------------------------
# main
# ---------------------------------------------------------------------


def main(args):
    "main"

    corpus = read_corpus(args,
                         preselected={"stage": ["units"]})
    if args.resources:
        rconll = read_tsv(args.resources)
    else:
        rconll = []
    background = Background(contexts=Context.for_corpus(corpus),
                            resources=_extract_resources(rconll))
    doc = corpus.values()[0]
    decoder_output = read_tsv(args.input)
    l_turns = _extract(doc, background, decoder_output)
    print(prettifyxml.prettify(_to_xml(l_turns), indent=" "),
          file=args.output)


if __name__ == "__main__":
    main(mk_argparser().parse_args())
